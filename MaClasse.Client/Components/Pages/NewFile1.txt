1. Côté Serveur – Utilisation de TempData dans un Contrôleur ou une Page Razor
Contrôleur MVC (exemple) :

csharp
Copier
public IActionResult LoginAction()
{
    TempData["Error"] = true;
    TempData["Message"] = "Un utilisateur avec cet email existe déjà";
    return Redirect("https://localhost:7235/");
}
Ici, le contrôleur stocke dans TempData les données à transmettre et redirige vers l'URL racine (Home).

2. Récupérer TempData dans une Page Razor et Propager vers Blazor
Pour que la page d'accueil affiche l'erreur, vous pouvez créer une page Razor (Index.cshtml) qui lit TempData via son PageModel. Vous pouvez ensuite afficher l'erreur et, si besoin, initialiser votre service d'état partagé pour que vos composants Blazor le consomment.

Index.cshtml.cs
csharp
Copier
using Microsoft.AspNetCore.Mvc.RazorPages;
using System;

namespace MaClasse.Client.Pages
{
    public class IndexModel : PageModel
    {
        // Propriétés récupérant les valeurs de TempData
        public bool HasError { get; set; }
        public string ErrorMessage { get; set; } = string.Empty;

        public void OnGet()
        {
            if (TempData.ContainsKey("Error"))
            {
                HasError = Convert.ToBoolean(TempData["Error"]);
            }
            if (TempData.ContainsKey("Message"))
            {
                ErrorMessage = TempData["Message"]?.ToString() ?? string.Empty;
            }
        }
    }
}
Index.cshtml
razor
Copier
@page
@model MaClasse.Client.Pages.IndexModel
@{
    Layout = "_Layout";
}

<div>
    @if(Model.HasError)
    {
        <div class="alert alert-danger">
            @Model.ErrorMessage
        </div>
    }
</div>

<!-- Intégration du composant Blazor dans la page Razor -->
<div>
    <component type="typeof(Auth3)" render-mode="ServerPrerendered" />
</div>
Dans cette page, TempData est lu via le PageModel et vous affichez directement le message d'erreur. Vous pouvez également, si besoin, initialiser votre service d'état partagé afin que le composant Blazor l'utilise.

3. Service d'État Partagé – RedirectStateService
Créez un service simple pour stocker l'état de redirection. Ce service pourra être mis à jour au chargement de la page ou via une API.

RedirectStateService.cs

csharp
Copier
public class RedirectStateService
{
    public bool HasError { get; set; }
    public string ErrorMessage { get; set; } = string.Empty;
}
Enregistrez-le dans Program.cs :

csharp
Copier
builder.Services.AddScoped<RedirectStateService>();
4. Utilisation du Service dans le Composant Blazor (Auth3)
Dans votre composant Blazor, vous pouvez injecter RedirectStateService pour afficher le message d'erreur. Par exemple, si vous souhaitez que ce composant (ou la page Home en Blazor) affiche l'erreur stockée dans le service :

Index.razor (si vous décidez d'avoir une page Blazor à part entière)

razor
Copier
@page "/"
@inject RedirectStateService RedirectState

<PageTitle>Home</PageTitle>

@if (RedirectState.HasError)
{
    <div class="alert alert-danger">
        @RedirectState.ErrorMessage
    </div>
}

<div>
    <Auth3 />
</div>
Ou bien, vous pouvez également mettre à jour le service dans le PageModel de votre page Razor en appelant une méthode API ou via un composant intermédiaire.

5. Synchroniser TempData avec RedirectStateService
La synchronisation peut se faire de plusieurs manières, par exemple :

Via le PageModel : Vous pouvez, dans le PageModel de Index.cshtml, appeler une méthode qui met à jour RedirectStateService. Pour cela, il faut accéder aux services dans la page Razor (ce qui est possible via l'injection dans la vue Razor) et, dès le chargement, copier les valeurs lues dans TempData dans RedirectStateService.

Via une API : Votre page Razor pourrait déclencher une requête vers une API qui renvoie l'état de redirection et met à jour RedirectStateService dans le composant Blazor.

Un exemple simple (si vous souhaitez le faire côté Razor) :

Dans Index.cshtml (Razor Page)
razor
Copier
@page
@model MaClasse.Client.Pages.IndexModel
@inject RedirectStateService RedirectState
@{
    Layout = "_Layout";
    // Propagation des valeurs lues depuis TempData dans le service d'état
    RedirectState.HasError = Model.HasError;
    RedirectState.ErrorMessage = Model.ErrorMessage;
}

<div>
    @if(Model.HasError)
    {
        <div class="alert alert-danger">
            @Model.ErrorMessage
        </div>
    }
</div>

<div>
    <component type="typeof(Auth3)" render-mode="ServerPrerendered" />
</div>
Dans ce cas, dès que la page est chargée, le service d'état est mis à jour avec les valeurs récupérées depuis TempData. Votre composant Blazor (Auth3) pourra ensuite lire ces valeurs via l'injection de RedirectStateService.

Conclusion
Côté serveur, dans votre contrôleur ou PageModel, vous stockez les informations d'erreur dans TempData et redirigez vers votre page d'accueil.
La page d'accueil (Index.cshtml) lit TempData dans son PageModel, affiche le message si besoin et, en parallèle, met à jour un service d'état partagé (RedirectStateService).
Le composant Blazor (Auth3 ou une page Blazor Index.razor) injecte RedirectStateService pour afficher le message d'erreur ou agir en fonction.
Cette approche vous permet de transmettre des informations d'une redirection effectuée côté serveur vers votre front Blazor, sans exposer les données dans l'URL, en combinant TempData (pour la transmission temporaire) et un service d'état partagé (pour l'accès côté composant).

Vous avez dit :
using Microsoft.AspNetCore.Components;

namespace MaClasse.Client.Components.Pages;

public partial class Home : ComponentBase
{
} voici le contenue cs de ma page home
Raisonnement terminé pendant 8 secondes
Voici un exemple complet pour votre page Home, en utilisant un composant Blazor qui lit le service d'état partagé (RedirectStateService) pour afficher un message d'erreur transmis depuis le serveur via TempData.

1. Le service d'état partagé (RedirectStateService.cs)
csharp
Copier
namespace MaClasse.Client.Services
{
    public class RedirectStateService
    {
        public bool HasError { get; set; }
        public string ErrorMessage { get; set; } = string.Empty;
    }
}
N'oubliez pas de l'enregistrer dans votre Program.cs :

csharp
Copier
builder.Services.AddScoped<RedirectStateService>();
2. La page Razor qui reçoit TempData côté serveur
Dans une application hybride Blazor Server, vous pouvez utiliser une page Razor (par exemple Index.cshtml) pour récupérer TempData dans le PageModel, puis transférer ces valeurs dans le service d'état. Par exemple :

Index.cshtml.cs

csharp
Copier
using Microsoft.AspNetCore.Mvc.RazorPages;
using System;

namespace MaClasse.Client.Pages
{
    public class IndexModel : PageModel
    {
        public bool HasError { get; set; }
        public string ErrorMessage { get; set; } = string.Empty;

        public void OnGet()
        {
            if (TempData.ContainsKey("Error"))
            {
                HasError = Convert.ToBoolean(TempData["Error"]);
            }
            if (TempData.ContainsKey("Message"))
            {
                ErrorMessage = TempData["Message"]?.ToString() ?? string.Empty;
            }
        }
    }
}
Index.cshtml

razor
Copier
@page
@model MaClasse.Client.Pages.IndexModel
@inject MaClasse.Client.Services.RedirectStateService RedirectState

@{
    Layout = "_Layout";
    // Transférer les valeurs de TempData dans le service d'état
    RedirectState.HasError = Model.HasError;
    RedirectState.ErrorMessage = Model.ErrorMessage;
}

<div>
    @if(Model.HasError)
    {
        <div class="alert alert-danger">
            @Model.ErrorMessage
        </div>
    }
</div>

<!-- Intégration du composant Blazor Home -->
<component type="typeof(MaClasse.Client.Components.Pages.Home)" render-mode="ServerPrerendered" />
Cette page Razor lit TempData, met à jour le service RedirectStateService et intègre ensuite votre composant Blazor Home.

3. La page Home en Blazor
Home.razor

razor
Copier
@page "/"
@inject MaClasse.Client.Services.RedirectStateService RedirectState

<PageTitle>Home</PageTitle>

@if (RedirectState.HasError)
{
    <div class="alert alert-danger">
        @RedirectState.ErrorMessage
    </div>
}

<div>
    <Auth3 />
</div>
Home.razor.cs

csharp
Copier
using Microsoft.AspNetCore.Components;

namespace MaClasse.Client.Components.Pages
{
    public partial class Home : ComponentBase
    {
        // Vous pouvez ajouter ici la logique spécifique à Home si nécessaire.
    }
}
Résumé du fonctionnement
Côté serveur, dans votre contrôleur ou page Razor, vous stockez les informations d'erreur dans TempData et redirigez vers la page d'accueil (ici Index.cshtml).
Index.cshtml (la page Razor) lit TempData dans son PageModel, puis met à jour le service RedirectStateService.
Le composant Home (Blazor) est intégré via un composant dans la page Razor et utilise le service RedirectStateService pour afficher le message d'erreur (s'il existe) avant d'afficher le composant Auth3.
Cette solution vous permet de transmettre des informations depuis le back-end via TempData sans exposer les données dans l'URL, tout en les rendant disponibles pour vos composants Blazor via le service d'état partagé.

Vous avez dit :
    public class IndexModel : PageModel à la place de public partial class Home : ComponentBase  ne pose pas de perobleme ?
Raisonnement terminé pendant quelques secondes
Non, cela ne pose pas de problème. En fait, ces deux classes ont des rôles différents dans l'architecture de votre application :

IndexModel (héritant de PageModel)
Cette classe fait partie d'une page Razor (Index.cshtml) et gère la logique côté serveur, notamment la récupération de TempData. Elle sert à préparer les données (comme les erreurs et messages) avant de rendre la vue Razor.

Home (héritant de ComponentBase)
Il s'agit d'un composant Blazor qui contient la logique et l'interface utilisateur côté client. Ce composant peut être intégré dans votre page Razor via la balise <component type="typeof(Home)" render-mode="ServerPrerendered" />.

En résumé, IndexModel gère la partie Razor (serveur) qui récupère TempData et transmet les informations au service d'état (RedirectStateService), tandis que Home est le composant Blazor qui, lui, consomme ce service pour afficher les informations côté client.

Ils coexistent sans conflit car ils interviennent à des niveaux différents du pipeline de rendu.

Vous avez dit :
je comprend pas je vais avoir mon composant Home.razor et Home.razor.cs plus un Index.cshtml et un Index.cshtml.cs ??
Raisonnement terminé pendant 10 secondes
Cela dépend de l'approche que vous souhaitez adopter pour transmettre des données côté serveur (via TempData) à vos composants Blazor.

Deux approches possibles
1. Application Blazor Pure (sans Razor Page MVC)
Vous n'avez alors que des composants Blazor (fichiers .razor et éventuellement leur code-behind .razor.cs).
Dans ce cas, vous ne pouvez pas utiliser directement TempData car celui-ci appartient au pipeline MVC/Razor Pages. Vous devrez utiliser d'autres moyens (cookies, API, ou un service d'état) pour passer les données depuis le back.
2. Application Hybride (Razor Page + Blazor)
Vous utilisez une page Razor (ex. Index.cshtml avec son Index.cshtml.cs) qui est le point d'entrée côté serveur.
Cette page Razor peut lire TempData dans son PageModel.
Ensuite, vous pouvez mettre à jour un service d'état partagé (comme RedirectStateService) avec les valeurs récupérées.
Puis, dans la page Razor, vous intégrez votre composant Blazor (par exemple, Home.razor et Home.razor.cs) en utilisant la balise <component ...>.
Exemple de structure pour l'approche hybride :

Index.cshtml et Index.cshtml.cs
Ces fichiers font partie d'une page Razor qui gère la lecture de TempData et qui met à jour un service d'état.
Par exemple :

razor
Copier
@page
@model MaClasse.Client.Pages.IndexModel
@inject MaClasse.Client.Services.RedirectStateService RedirectState

@{
    Layout = "_Layout";
    // Transfert des données depuis TempData vers le service d'état
    RedirectState.HasError = Model.HasError;
    RedirectState.ErrorMessage = Model.ErrorMessage;
}

<div>
    @if(Model.HasError)
    {
        <div class="alert alert-danger">
            @Model.ErrorMessage
        </div>
    }
</div>

<!-- Inclusion du composant Blazor Home -->
<component type="typeof(MaClasse.Client.Components.Pages.Home)" render-mode="ServerPrerendered" />
Et dans Index.cshtml.cs :

csharp
Copier
using Microsoft.AspNetCore.Mvc.RazorPages;
using System;

namespace MaClasse.Client.Pages
{
    public class IndexModel : PageModel
    {
        public bool HasError { get; set; }
        public string ErrorMessage { get; set; } = string.Empty;

        public void OnGet()
        {
            if (TempData.ContainsKey("Error"))
            {
                HasError = Convert.ToBoolean(TempData["Error"]);
            }
            if (TempData.ContainsKey("Message"))
            {
                ErrorMessage = TempData["Message"]?.ToString() ?? string.Empty;
            }
        }
    }
}
Home.razor et Home.razor.cs
Ce composant Blazor représente votre interface côté client et consomme le service d'état. Par exemple, Home.razor :

razor
Copier
@page "/"
@inject MaClasse.Client.Services.RedirectStateService RedirectState

<PageTitle>Home</PageTitle>

@if (RedirectState.HasError)
{
    <div class="alert alert-danger">
        @RedirectState.ErrorMessage
    </div>
}

<div>
    <Auth3 />
</div>
Et Home.razor.cs (s'il y a de la logique spécifique) :

csharp
Copier
using Microsoft.AspNetCore.Components;

namespace MaClasse.Client.Components.Pages
{
    public partial class Home : ComponentBase
    {
        // Logique spécifique à Home (si nécessaire)
    }
}
En résumé
Oui, dans une approche hybride, vous aurez à la fois :
Une page Razor (Index.cshtml + Index.cshtml.cs) qui gère TempData côté serveur,
Un composant Blazor (Home.razor + Home.razor.cs) qui est intégré dans cette page et qui consomme un service d'état (RedirectStateService).
Cette structure vous permet de bénéficier de TempData pour transférer des données lors d'une redirection côté serveur, puis d'utiliser ces données dans vos composants Blazor grâce à un service d'état partagé.

Si vous préférez une application purement Blazor, il faudra opter pour d'autres mécanismes (cookies, API, etc.) car TempData ne sera pas disponible directement.